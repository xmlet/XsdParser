<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright SDMX 2010 - http://www.sdmx.org -->
<xs:schema targetNamespace="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"
  elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"
  xmlns:structure="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"
  xmlns:common="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common">
  <xs:import namespace="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"
    schemaLocation="SDMXCommon.xsd"/>
  <xs:include schemaLocation="SDMXStructureBase.xsd"/>

  <xs:annotation>
    <xs:appinfo>SDMX Hierarchical Code List Structure Module</xs:appinfo>
    <xs:documentation>The hierarchical code list structure module defines the structure of
      hierarchical code list constructs.
    </xs:documentation>
  </xs:annotation>

  <xs:complexType name="HierarchicalCodelistBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>HierarchicalCodelistBaseType is an abstract base class that is the basis for
        the HierarchicalCodelistType. It requires that a name be supplied.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HierarchicalCodelistType">
    <xs:annotation>
      <xs:documentation>HierarchicalCodelistType describes the structure of a hierarchical codelist.
        A hierarchical code list is defined as an organised collection of codes that may participate
        in many parent/child relationships with other codes in the list, as defined by one or more
        hierarchy of the list.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="HierarchicalCodelistBaseType">
        <xs:sequence>
          <xs:element name="IncludedCodelist" type="IncludedCodelistReferenceType" minOccurs="0"
            maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>IndludedCodelist provides a collection of references to the code
                lists whose codes are arranged in this hierarchical code list.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Hierarchy" type="HierarchyType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Hierarchy describes a classification structure arranged in levels of
                detail from the broadest to the most detailed level. These levels can be formal or
                informal, and are not necessary to describe. If the hierarchy does contain levels,
                then each hierarchical code is assumed to exist in the level where the depths of
                nesting match.
              </xs:documentation>
            </xs:annotation>
            <xs:unique name="Hierarchy_UnqiueHierarchicalCode">
              <xs:selector xpath="structure:HierarchicalCode"/>
              <xs:field xpath="@id"/>
            </xs:unique>
            <xs:unique name="Hierarchy_UnqiueLevel">
              <xs:selector xpath=".//structure:Level"/>
              <xs:field xpath="@id"/>
            </xs:unique>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HierarchyBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>HierarchyBaseType is an abstract base type that serves as the basis for the
        HierarchyType. It requires a name and id be provided.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="NameableType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HierarchyType">
    <xs:annotation>
      <xs:documentation>The Hierarchy is an abstract type that provides for a classification
        structure of referenced codes arranged in levels of detail from the broadest to the most
        detailed level. The levels in which the code exist can be formal or informal.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="HierarchyBaseType">
        <xs:sequence>
          <xs:element name="HierarchicalCode" type="HierarchicalCodeType" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>HierarchicalCode is used to assemble the codes from the codelist(s)
                referenced into a hierarchy.
              </xs:documentation>
            </xs:annotation>
            <xs:unique name="HierarchicalCode_UnqiueHierarchicalCode">
              <xs:selector xpath="structure:HierarchicalCode"/>
              <xs:field xpath="@id"/>
            </xs:unique>
          </xs:element>
          <xs:element name="Level" type="LevelType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>In a formally leveled hierarchy, Level describes a group of codes
                which are characterised by homogeneous coding, and where the parent of each code in
                the group is at the same higher level of the hierarchy. In a value based hierarchy
                Level describes information about the codes at the specified nesting level. This
                structure is recursive to indicate the hierarchy of the levels.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="leveled" type="xs:boolean" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>The leveled attribute indicates that the hierarchy has formal levels.
              In this case, every code should have a level associated with it.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HierarchicalCodeBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>HierarchicalCodeBaseType is an abstract base type the creates the basis for
        the HierarchicalCodeType. It removes the urn and uri.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="IdentifiableType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="required">
          <xs:annotation>
            <xs:documentation>The id attribute allows for an id to be assigned to the use of the
              particular code at that specific point in the hierarchy. This value is unique within
              the hierarchy being created, and is used to map the hierarchy against external
              structures.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HierarchicalCodeType">
    <xs:annotation>
      <xs:documentation>HierarchicalCodeType describes the structure of a hierarchical code. A
        hierarchical code provides for a reference to a code that is referenced within the
        hierarchical code list via either a complete reference to a code through either a URN or
        full set of reference fields, or a local reference which utilizes the included codelist
        reference alias and the identification of a code from the list. Codes are arranged in a
        hierarchy by this reference. Note that it is possible to reference a single code such that
        it has multiple parents within the hierarchy. Further, the hierarchy may or may not be a
        leveled one.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="HierarchicalCodeBaseType">
        <xs:sequence>
          <xs:choice>
            <xs:element name="Code" type="common:CodeReferenceType">
              <xs:annotation>
                <xs:documentation>Code provides a complete, explicit reference to a code through
                  either its URN, or a complete reference to the codelist and code.
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:sequence>
              <xs:element name="CodelistAliasRef" type="common:IDType">
                <xs:annotation>
                  <xs:documentation>CodelistAliasRef references an alias assigned in a
                    IncludedCodelistReference element in the containing hierarchical codelist. This
                    is used in conjunction with the CodeID element to reference a code from one of
                    the included codelists.
                  </xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="CodeID" type="common:LocalCodeReferenceType">
                <xs:annotation>
                  <xs:documentation>CodeID references the id of a code from the codelist that is
                    referenced through the CodelistAliaRef element.
                  </xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:choice>
          <xs:element name="HierarchicalCode" type="HierarchicalCodeType" minOccurs="0"
            maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>HierarchicalCode is used to nest referenced codes into a value based
                hierarchy.
              </xs:documentation>
            </xs:annotation>
            <xs:unique name="ChildHierarchicalCode_UnqiueHierarchicalCode">
              <xs:selector xpath="structure:HierarchicalCode"/>
              <xs:field xpath="@id"/>
            </xs:unique>
          </xs:element>
          <xs:element name="Level" type="common:LocalLevelReferenceType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Level references a formal level defined within the hierarchy which
                defines this hierarchical code. This is only necessary if the nesting depth of the
                hierarchical code does not correspond to the nesting depth of the level to which it
                belongs (i.e. the hieararchical code is to skip down a level). Otherwise, the code
                is assumed to exist at the level in which the nesting depth of the level matches the
                nesting depth of the code.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="version" type="common:VersionType" use="optional">
          <xs:annotation>
            <xs:documentation>The version attriubte contains a version number for the hierarchical
              code. A hierarchical code is not formally versionable, therefore each code must have a
              unique identifier. The version supplied here is for informational purposes only and is
              not used to uniquely identity the code.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="validFrom" type="xs:dateTime" use="optional">
          <xs:annotation>
            <xs:documentation>The validFrom attriubte indicates the point in time in which the
              hiearchical code became effective. This can be used to track the historicity of codes
              changing over time.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="validTo" type="xs:dateTime" use="optional">
          <xs:annotation>
            <xs:documentation>The validTo attriubte indicates the point in time in which the
              hiearchical code became no longer effective. This can be used to track the historicity
              of codes changing over time.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LevelBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>LevelBaseType is an abstract base type that makes up the basis for the
        LevelType. It requires a name and id.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="NameableType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LevelType">
    <xs:annotation>
      <xs:documentation>LevelType describes a level in a hierarchical codelist. Where level is
        defined as a group where codes can be characterised by homogeneous coding, and where the
        parent of each code in the group is at the same higher level of the hierarchy.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="LevelBaseType">
        <xs:sequence>
          <xs:element name="CodingFormat" type="CodingTextFormatType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>CodingFormat specifies the text formatting of the codes in this
                level. This includes facets such as the expected characters and the length of the
                codes.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Level" type="LevelType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Level describes the next level down in the hierarchy.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="IncludedCodelistReferenceType">
    <xs:annotation>
      <xs:documentation>IncludedCodelistReferenceType provides the structure for a referencing a
        codelist and optionally providing a local alias identification for this reference.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="common:CodelistReferenceType">
        <xs:attribute name="alias" type="common:IDType" use="optional">
          <xs:annotation>
            <xs:documentation>The alias attribute is used to carry the identifier for the referenced
              codelist, so that codes from that list can be easily referenced by the hierarchical
              codes contained in the parent hierarchy, without having to repeat the reference to the
              codelist itself. The alias attribute must be unique within the parent hierarchical
              codelist.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CodingTextFormatType">
    <xs:complexContent>
      <xs:restriction base="SimpleComponentTextFormatType">
        <xs:attribute name="textType" type="SimpleCodeDataType" use="optional"/>
        <xs:attribute name="isSequence" type="xs:boolean" use="optional"/>
        <xs:attribute name="interval" type="xs:integer" use="optional"/>
        <xs:attribute name="startValue" type="xs:positiveInteger" use="optional"/>
        <xs:attribute name="endValue" type="xs:positiveInteger" use="optional"/>
        <xs:attribute name="timeInterval" type="xs:duration" use="prohibited"/>
        <xs:attribute name="startTime" type="common:BasicTimePeriodType" use="prohibited"/>
        <xs:attribute name="endTime" type="common:BasicTimePeriodType" use="prohibited"/>
        <xs:attribute name="minLength" type="xs:positiveInteger" use="optional"/>
        <xs:attribute name="maxLength" type="xs:positiveInteger" use="optional"/>
        <xs:attribute name="minValue" type="xs:positiveInteger" use="optional"/>
        <xs:attribute name="maxValue" type="xs:positiveInteger" use="optional"/>
        <xs:attribute name="decimals" type="xs:integer" use="prohibited"/>
        <xs:attribute name="pattern" type="xs:string" use="optional"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="SimpleCodeDataType">
    <xs:annotation>
      <xs:documentation>SimpleCodeDataType restricts SimpleDataType to specify the allowable data
        types for a simple code. The possible values are simply Alpha, AlphaNumeric, or Numeric.
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="common:SimpleDataType">
      <xs:enumeration value="Alpha"/>
      <xs:enumeration value="AlphaNumeric"/>
      <xs:enumeration value="Numeric"/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>